AWSTemplateFormatVersion: '2010-09-09'

Description:
 AWS Network Resource

Parameters:
 ProjectName:
  Description: ""
  Type: String
  Default: Dev

 DomainName:
  Description: ""
  Type: String

 CidrBlockVPC:
  Description: ""
  Type: String
  Default: 10.0.0.0/16

 CidrBlockPublicSubnetA:
  Description: ""
  Type: String
  Default: 10.0.0.0/27

 CidrBlockPublicSubnetC:
  Description: ""
  Type: String
  Default: 10.0.0.32/27

 CidrBlockPrivateSubnetA:
  Description: ""
  Type: String
  Default: 10.0.0.64/27

 CidrBlockPrivateSubnetC:
  Description: ""
  Type: String
  Default: 10.0.0.96/27

Outputs:
 ProjectName:
  Value: !Ref ProjectName
  Export:
   Name: !Ref ProjectName

Resources:
 VPC:
  Type: AWS::EC2::VPC
  Properties:
   CidrBlock: !Ref CidrBlockVPC
   EnableDnsSupport: "true"
   EnableDnsHostnames: "true"
   InstanceTenancy: default
   Tags:
    - Key: Name
      Value: !Sub "VPC-${ProjectName}"

 PublicRouteTable:
  Type: AWS::EC2::RouteTable
  Properties:
   VpcId: !Ref VPC
   Tags:
    - Key: Name
      Value: !Sub "PublicRouteTable-${ProjectName}"

 PrivateRouteTable:
  Type: AWS::EC2::RouteTable
  Properties:
   VpcId: !Ref VPC
   Tags:
    - Key: Name
      Value: !Sub "PrivateRouteTable-${ProjectName}"

 PublicSubnetA:
  Type: AWS::EC2::Subnet
  Properties:
   VpcId: !Ref VPC
   CidrBlock: !Ref CidrBlockPublicSubnetA
   AvailabilityZone: !Select [ "0", !GetAZs ""]
   Tags:
    - Key: Name
      Value: !Sub "PublicSubnetA-${ProjectName}"
 PublicSubnetARouteTableAssociation:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
   SubnetId: !Ref PublicSubnetA
   RouteTableId: !Ref PublicRouteTable

 PublicSubnetC:
  Type: AWS::EC2::Subnet
  Properties:
   VpcId: !Ref VPC
   CidrBlock: !Ref CidrBlockPublicSubnetC
   AvailabilityZone: !Select [ "1", !GetAZs ""]
   Tags:
    - Key: Name
      Value: !Sub "PublicSubnetC-${ProjectName}"
 PublicSubnetCRouteTableAssociation:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
   SubnetId: !Ref PublicSubnetC
   RouteTableId: !Ref PublicRouteTable

 PrivateSubnetA:

 PrivateSubnetC:

 InternetGateway:
  Type: AWS::EC2::InternetGateway
  Properties:
   Tags:
    - Key: Name
      Value: !Sub "InternetGateway-${ProjectName}"

 AttachGateway:
  Type: AWS::EC2::VPCGatewayAttachment
  Properties:
   InternetGatewayId: !Ref InternetGateway
   VpcId: !Ref VPC

 Route:
  Type: AWS::EC2::Route
  Properties:
   RouteTableId: !Ref PublicRouteTable
   DestinationCidrBlock: 0.0.0.0/0
   GatewayId: !Ref InternetGateway

 InternetSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
   GroupDescription: ""
   VpcId: !Ref VPC
   SecurityGroupIngress:
    - CidrIp: "0.0.0.0/0"
      IpProtocol: "tcp"
      FromPort: "80"
      ToPort: "80"
   Tags:
    - Key: Name
      Value: !Sub "InternetSecurityGroup-${ProjectName}"

 ApplicationSecurityGroup:

 DataStoreSecurityGroup:

 ApplicationLoadBalancer:
  Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  Properties:
   Scheme: internet-facing
   SecurityGroups:
    - !Ref InternetSecurityGroup
   Subnets:
    - !Ref PublicSubnetA
    - !Ref PublicSubnetC
   Tags:
    - Key: Name
      Value: !Sub "ApplicationLoadBalancer-${ProjectName}"

 ApplicationLoadBalancerListener:
  Type: AWS::ElasticLoadBalancingV2::Listener
  Properties:
   LoadBalancerArn: !Ref ApplicationLoadBalancer
   Port: "80"
   Protocol: "HTTP"
   DefaultActions:
    - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
      Type: forward

 ApplicationLoadBalancerTargetGroup:
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Properties:
   Port: "80"
   Protocol: "HTTP"
   VpcId: !Ref VPC

 Route53DNSRecord:
  Type: AWS::Route53::RecordSet
  Properties:
   Type: A
   AliasTaret:
    DNSName: !GetAtt ApplicationLoadBalancer.DNSName
    HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
   Comment: ""
   HostedZoneName: !Join [ "", [!Ref DomainName, "."]]
   Name: !Join [ "", [!Ref ProjectName, ".", !Ref DomainName, "."]]
