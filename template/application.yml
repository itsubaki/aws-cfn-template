AWSTemplateFormatVersion: '2010-09-09'

Description:
  AWS Application Resource

Parameters:
  ProductName:
    Description: ""
    Type: String
    Default: example
  Environment:
    Description: ""
    Type: String
    Default: dev
  DomainName:
    Description: ""
    Type: String
    Default: example.com
  Role:
    Description: ""
    Type: String
    Default: default

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Role}-${Environment}-${ProductName}"
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Sub "log.${ProductName}.${DomainName}"
        - Key: idle_timeout.timeout_seconds
          Value: 60
      SecurityGroups:
        - !Sub '{{resolve:ssm:/${ProductName}/${Environment}/PublicSecurityGroup:1}}'
      Subnets:
        - !Sub '{{resolve:ssm:/${ProductName}/${Environment}/PublicSubnetA:1}}'
        - !Sub '{{resolve:ssm:/${ProductName}/${Environment}/PublicSubnetB:1}}'
        - !Sub '{{resolve:ssm:/${ProductName}/${Environment}/PublicSubnetC:1}}'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Role}-${Environment}-${ProductName}"
      Port: "80"
      Protocol: "HTTP"
      VpcId: !Sub '{{resolve:ssm:/${ProductName}/${Environment}/VPCID:1}}'
      HealthCheckPath:            !Ref HealthCheckPath
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
      HealthCheckTimeoutSeconds:  !Ref HealthCheckTimeoutSeconds
      HealthyThresholdCount:      !Ref HealthyThresholdCount
      UnhealthyThresholdCount:    !Ref UnhealthyThresholdCount

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: "443"
      Protocol: "HTTPS"
      Certificates:
        - CertificateArn: !Sub '{{resolve:ssm:/${ProductName}/${Environment}/Certificate:1}}'
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/"
      ListenerArn: !Ref Listener
      Priority: 1

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMRole

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Role}-${Environment}-${ProductName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "ec2.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      Policies:
        - PolicyName: !Sub "${Role}-${Environment}-${ProductName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                  - "ec2:CreateTags"
                  - "ec2:Describe*"
                  - "ec2:Stop*"
                  - "autoscaling:Describe*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "cloudwatch:GetMetricStatistics"
                  - "sns:Publish"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::log-${Environment}.${ProductName}.${DomainName}"
                  - !Sub "arn:aws:s3:::log-${Environment}.${ProductName}.${DomainName}/*"

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count:   !Ref DesiredCapacity
        Timeout: "PT20M"
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 80
    UpdatePolicy:
    AutoScalingReplacingUpdate:
      WillReplace: true
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize:         !Ref MaxSize
      MinSize:         !Ref MinSize
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Sub '{{resolve:ssm:/${ProductName}/${Environment}/PrivateSubnetA:1}}'
        - !Sub '{{resolve:ssm:/${ProductName}/${Environment}/PrivateSubnetB:1}}'
        - !Sub '{{resolve:ssm:/${ProductName}/${Environment}/PrivateSubnetC:1}}'
      HealthCheckType: "ELB"
      HealthCheckGracePeriod: 600

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:      !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName:      !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: true
            VolumeType: "gp2"
            VolumeSize: 30
      SecurityGroups:
        - !Sub '{{resolve:ssm:/${ProductName}/${Environment}/PublicSecurityGroup:1}}'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/sh
          set -x

          # install basic software
          apt-get -y update
          apt-get -y install python-pip software-properties-common
          pip install awscli boto3
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -a /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          chmod u+x /etc/init.d/cfn-hup
          
          # setup environment
          curl -S -s http://169.254.169.254/latest/meta-data/instance-id > /tmp/instance-id
          echo "export InstanceID=`cat /tmp/instance-id`" >> /etc/profile.d/userdata.sh
          echo "export ProductID=${ProductID}"            >> /etc/profile.d/userdata.sh
          echo "export Environment=${Environment}"        >> /etc/profile.d/userdata.sh
          echo "export Role=${Role}"                      >> /etc/profile.d/userdata.sh
          echo "export DomainName=${DomainName}"          >> /etc/profile.d/userdata.sh
          echo "export AWS_REGION=${AWS::Region}"         >> /etc/profile.d/userdata.sh
          
          . /etc/profile.d/userdata.sh
          env
          
          # download ansible playbook
#           mkdir -p /home/ubuntu/ansible
#           chown ubuntu:ubuntu /home/ubuntu/ansible
#           cd /home/ubuntu/ansible
#           aws s3 cp s3://HOGEHOGE .
#           unzip playbook.zip
          
#           ansible-playbook ${Role}.yml --connection=local -e @vars/all.yml
#           echo $? >> /tmp/ansible-status
          
          # send status to cloudformation
          /usr/local/bin/cfn-signal -e `cat /tmp/status` --stack ${AWS::StackName} --region ${AWS::Region} --resource AutoScalingGroup
