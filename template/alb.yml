AWSTemplateFormatVersion: '2010-09-09'

Description:
  AWS ALB Resource

Parameters:
  ProjectName:
    Description: ""
    Type: String
    Default: example
  DomainName:
    Description: ""
    Type: String
  DNSHostName:
    Description: ""
    Type: String
    Default: ""
  CertificateArn:
    Description: ""
    Type: String
  Schema:
    Description: ""
    Type: String
    Default: "internet-facing"
    AllowedValues:
      - "internet-facing"
      - "internal"
  SubnetA:
    Description: ""
    Type: String
  SubnetC:
    Description: ""
    Type: String

Conditions:
  SetDNSHostName: !Not [ !Equals [ !Ref DNSHostName, "" ] ]
  IsPublic: !Equals [ !Ref Schema, "internet-facing" ]

Outputs:
  TargetGroupARN:
    Description: ""
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${ProjectName}-TargetGroup"

Resources:
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Comment: ""
      HostedZoneName: !Sub "${DomainName}."
      Name: !If
        - SetDNSHostName
        - !Sub "${DNSHostName}.${DomainName}"
        - !Sub "${ProjectName}.${DomainName}"
      AliasTarget:
        DNSName:      !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: !Ref Schema
      SecurityGroups:
        - !If
          - IsPublic
          - { "Fn::ImportValue": !Sub "${ProjectName}-PublicSecurityGroup" }
          - { "Fn::ImportValue": !Sub "${ProjectName}-PrivateSecurityGroup" }
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}.alb.public"
        - Key: ProjectName
          Value: !Ref ProjectName

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: "443"
      Protocol: "HTTP"
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Certificates:
        - CertificateArn: !Ref CertificateArn

  ListnerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: Listener
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: "80"
      Protocol: "HTTP"
      VpcId: { "Fn::ImportValue": !Sub "${ProjectName}-VPC" }
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}.target-group"
        - Key: ProjectName
          Value: !Ref ProjectName
